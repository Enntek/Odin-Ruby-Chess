** remember to use bookmarks **
** try call-stack navigation **
** try conditional breakpoints with pry **
** try navigating frames with frame numbers with pry **

implement draws
move_list to show: 
- 0-0 kingside castle or 0-0-0 queen side castle
- pawn promotion
- checkmate

Use move_list to set @current_player to white or black depending on whether
move_list.size is even (white) or odd (black).

Testing checkmate:
-- 1 where the king must capture the piece (Queen)
-- 1 where another piece must block the attacker (Bishop, Rook, or Queen)
-- 1 where another piece must capture the attacker
-- 1 where 2 pieces are checking the King at the same time

draws:
stalemate because king has no legal moves, other pieces cannot move either
stalemate from insufficient material:
  King vs. king
  King and bishop vs. king
  King and knight vs. king
  King and bishop vs. king and bishop of the same color as the opponent's bishop
auto draw if 6 repeated moves
Player has no legal moves. (King is stuck but not in check)
- Iterate through pdf moves, if one legal move is found, this tie type is false.

At the end:
Figure out private vs public methods
We need to test what, not how.
You must write edge cases for all of your tests.
invalid move results in TWO msgs about help. One is from the invalid move, one is always sent.
Try to reduce number of "require_relative" lines
Implement rudimentary AI player that makes random legal moves.
Rework special moves and Move, do not spend too much time refactoring.
Look at methods with lots of args, maybe use a hash
Is there an abstraction for castle? Much of the code seems repetitive.
Display captured pieces to the right? Need up to 15 spaces.
Add validation for all 'gets'
Create game pieces using composition. Parts would be things like moves, variables.


Other testing tools to use:
p/puts anywhere in test
let variables vs instance variables
set = variables like this
game = Game.new (and like this)
allow_any_instance_of
expect_any_instance_of
receive_message_chain(:method1, :method2, :method3).and_return('some_characters')
instance_variable_get
instance_variable_set
use mocks/stubs sparingly

Assignment
Build a command line Chess game where two players can play against each other.
The game should be properly constrained – it should prevent players from making 
illegal moves and declare check or check mate in the correct situations.
Make it so you can save the board at any time (remember how to serialize?)
Write tests for the important parts. You don’t need to TDD it (unless you want to),
but be sure to use RSpec tests for anything that you find yourself typing into
the command line repeatedly.
Do your best to keep your classes modular and clean and your methods doing only one
thing each.
This is the largest program that you’ve written, so you’ll definitely start to see
the benefits of good organization (and testing) when you start running into bugs.
Unfamiliar with Chess? Check out some of the additional resources to help you get
your bearings.
Have fun! Check out the unicode characters for a little spice for your gameboard.
(Optional extension) Build a very simple AI computer player (perhaps who does a
random legal move)